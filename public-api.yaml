openapi: "3.0.0"

info:
  version: "0.1.1"
  title: "MOSTLY AI"
  description: |
    API access to your MOSTLY AI platform.

    ### Authentication

    To access the endpoints of this API, you must provide a valid API key. You can obtain an API key by signing up on our platform. Once you have your API key, you must include it in all your requests by adding it to the header:

    ```
    X-MOSTLY-API-KEY: your-api-key-here
    ```

    Please replace `your-api-key-here` with your actual API key. If your API key is missing or invalid, you will receive a `401 Unauthorized` response.

tags:
  - name: "Connectors"
    description: "Integration with external data sources and data destinations"
  - name: "Generators"
    description: "Training a generator based on some source data"
  - name: "Source Tables"
    description: "A source data table"
  - name: "Source Columns"
    description: "A source data column"
  - name: "Source Foreign Keys"
    description: "A source data foreign key"
  - name: "Generator Training"
    description: "The training of a generator"
  - name: "Synthetic Probes"
    description: "Generate a synthetic probe based on a trained generator"
  - name: "Synthetic Datasets"
    description: "Generate a synthetic dataset based on a trained generator"
  - name: "Synthetic Tables"
    description: "A synthetic data table"
  - name: "Synthetic Generation"
    description: "The generation of a synthetic dataset"
  - name: "Assistant"
    description: "An AI-powered Assistant with a Python compute environment"
  - name: "Shares"
    description: "Share resources with other users"
  - name: "Users"
    description: "User management"
  - name: "Likes"
    description: "Like, unlike or count likes on resources"

paths:

  # CONNECTORS
  /connectors:
    get:
      summary: "List connectors"
      description: |
        Paginate through all connectors that the user has access to.
        Only connectors, that are independent of a table, will be returned.
      operationId: "listConnectors"
      tags: [ "Connectors" ]
      parameters:
        - $ref: "#/components/parameters/pageOffset"
        - $ref: "#/components/parameters/pageLimit"
        - $ref: "#/components/parameters/filterBySearchTerm"
        - $ref: "#/components/parameters/filterByConnectorAccessType"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  totalCount:
                    $ref: "#/components/schemas/PaginatedTotalCount"
                  results:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/ConnectorListItem"
    post:
      summary: "Create connector"
      description: |
        Create a connector, and optionally validate the connection before saving.

        If validation fails, a 400 status with an error message will be returned.
      operationId: "createConnector"
      tags: [ "Connectors" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectorConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connector"
        "400":
          $ref: "#/components/responses/BadRequest"
  /connectors/{id}:
    parameters:
      - $ref: "#/components/parameters/connectorIdPath"
    get:
      summary: "Retrieve connector"
      operationId: "getConnector"
      tags: [ "Connectors" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connector"
    patch:
      summary: "Update connector"
      description: |
        Update a connector, and optionally validate the connection before saving.

        If validation fails, a 400 status with an error message will be returned.
      operationId: "patchConnector"
      tags: [ "Connectors" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConnectorPatchConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Connector"
        "400":
          $ref: "#/components/responses/BadRequest"
    delete:
      summary: "Delete connector"
      operationId: "deleteConnector"
      tags: [ "Connectors" ]
      responses:
        "200":
          description: "OK"
        "400":
          $ref: "#/components/responses/BadRequest"
  /connectors/{id}/config:
    parameters:
      - $ref: "#/components/parameters/connectorIdPath"
    get:
      summary: "Retrieve configurable Connector properties as JSON"
      operationId: "getConnectorConfig"
      tags: [ "Connectors" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConnectorConfig"
  /connectors/{id}/locations:
    parameters:
      - $ref: "#/components/parameters/connectorIdPath"
    get:
      summary: "List connector locations"
      description: |
        List the available databases, schemas, tables or folders for a connector.
        For storage connectors, this returns list of folders and files at root, respectively at `prefix` level.
        For DB connectors, this returns list of schemas (or databases for DBs without schema), respectively list of tables if `prefix` is provided.

        The formats of the locations are:

        - Cloud storage:
            - `AZURE_STORAGE`: `container/path`
            - `GOOGLE_CLOUD_STORAGE`: `bucket/path`
            - `S3_STORAGE`: `bucket/path`
        - Database:
            - `BIGQUERY`: `dataset.table`
            - `DATABRICKS`: `schema.table`
            - `HIVE`: `database.table`
            - `MARIADB`: `database.table`
            - `MSSQL`: `schema.table`
            - `MYSQL`: `database.table`
            - `ORACLE`: `schema.table`
            - `POSTGRES`: `schema.table`
            - `SNOWFLAKE`: `schema.table`
      operationId: "listConnectorLocations"
      tags: [ "Connectors" ]
      parameters:
        - name: "prefix"
          description: "The prefix to filter the results by."
          in: "query"
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "string"
  /connectors/{id}/schema:
    parameters:
      - $ref: "#/components/parameters/connectorIdPath"
    get:
      summary: "Get connector table schema"
      description: |
        List the available columns, as well as their data type for a connector table.
      operationId: "getConnectorTableSchema"
      tags: [ "Connectors" ]
      parameters:
        - name: "location"
          description: "Specifies the target within the connector from which to retrieve the schema. The format of this parameter varies by connector type."
          in: "query"
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  type: "object"
                  properties:
                    name:
                      description: "The name of the column."
                      type: "string"
                    originalDataType:
                      description: "The original vendor-specific data type of the column."
                      type: "string"
                    defaultModelEncodingType:
                      $ref: "#/components/schemas/ModelEncodingType"
  /connectors/{id}/share:
    parameters:
      - $ref: "#/components/parameters/connectorIdPath"
    get:
      summary: "List shared users"
      description: "List all users that the connector is shared with."
      operationId: "listConnectorShares"
      tags: [ "Shares" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceShares"
    post:
      summary: "Share connector"
      description: "Share the provided connector with the provided user."
      operationId: "shareConnector"
      tags: [ "Shares" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShareConfig"
      responses:
        "200":
          description: "OK"
    delete:
      summary: "Revoke connector share"
      description: "Revoke a connector share with the provided user."
      operationId: "deleteConnectorShare"
      tags: [ "Shares" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShareDeleteConfig"
      responses:
        "200":
          description: "OK"
  /connectors/{id}/share/public:
    parameters:
      - $ref: "#/components/parameters/connectorIdPath"
    put:
      summary: "Share connector publicly"
      description: "Share the provided connector publicly."
      operationId: "createConnectorPublicShare"
      tags: [ "Shares" ]
      responses:
        "200":
          description: "OK"
    delete:
      summary: "Revoke connector public share"
      description: "Revoke a connector public share."
      operationId: "deleteConnectorPublicShare"
      tags: [ "Shares" ]
      responses:
        "200":
          description: "OK"

  # GENERATORS
  /generators:
    get:
      summary: "List generators"
      description: "Paginate through all generators that the user has access to."
      operationId: "listGenerators"
      tags: [ "Generators" ]
      parameters:
        - $ref: "#/components/parameters/pageOffset"
        - $ref: "#/components/parameters/pageLimit"
        - $ref: "#/components/parameters/filterByProgressStatus"
        - $ref: "#/components/parameters/filterBySearchTerm"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  totalCount:
                    $ref: "#/components/schemas/PaginatedTotalCount"
                  results:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/GeneratorListItem"
    post:
      summary: "Create generator"
      description: "Create a generator."
      operationId: "createGenerator"
      tags: [ "Generators" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GeneratorConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Generator"
        "400":
          $ref: "#/components/responses/BadRequest"
  /generators/{id}:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
    get:
      summary: "Retrieve generator"
      operationId: "getGenerator"
      tags: [ "Generators" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Generator"
    patch:
      summary: "Update generator"
      operationId: "updateGenerator"
      tags: [ "Generators" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GeneratorPatchConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Generator"
    delete:
      summary: "Delete generator"
      operationId: "deleteGenerator"
      tags: [ "Generators" ]
      responses:
        "200":
          description: "OK"
        "400":
          $ref: "#/components/responses/BadRequest"
  /generators/{id}/like:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
    post:
      summary: "Like a generator"
      description: "Like the provided generator."
      operationId: "likeGenerator"
      tags: [ "Likes" ]
      responses:
        "200":
          description: "OK"
    delete:
      summary: "Unlike a generator"
      description: "Unlike the provided generator."
      operationId: "unLikeGenerator"
      tags: [ "Likes" ]
      responses:
        "200":
          description: "OK"
  /generators/{id}/share:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
    get:
      summary: "List shared users"
      description: "List all users that the generator is shared with."
      operationId: "listGeneratorShares"
      tags: [ "Shares" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceShares"
    post:
      summary: "Share generator"
      description: "Share the provided generator with the provided user."
      operationId: "shareGenerator"
      tags: [ "Shares" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShareConfig"
      responses:
        "200":
          description: "OK"
    delete:
      summary: "Revoke generator share"
      description: "Revoke a generator share with the provided user."
      operationId: "deleteGeneratorShare"
      tags: [ "Shares" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShareDeleteConfig"
      responses:
        "200":
          description: "OK"
  /generators/{id}/share/public:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
    put:
      summary: "Share generator publicly"
      description: "Share the provided generator publicly."
      operationId: "createGeneratorPublicShare"
      tags: [ "Shares" ]
      responses:
        "200":
          description: "OK"
    delete:
      summary: "Revoke generator public share"
      description: "Revoke a generator public share."
      operationId: "deleteGeneratorPublicShare"
      tags: [ "Shares" ]
      responses:
        "200":
          description: "OK"
  /generators/{id}/config:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
    get:
      summary: "Retrieve configurable Generator properties as JSON"
      operationId: "getGeneratorConfig"
      tags: [ "Generators" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GeneratorConfig"
  /generators/{id}/clone:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
    post:
      summary: "Clone generator"
      description: | 
        Create a new generator, re-using existing data and model configurations. By setting trainingStatus 
        to CONTINUE, the model weights are copied as well, and training will continue from there. Note, that
        in that case, only the training parameters (maxSampleSize, maxEpochs, batchSize, compute, etc.) of 
        the model configuration can still be modified. Other configurations, like columns, model, and 
        valueProtection cannot be changed anymore, as these would break compatibility with the existing model 
        weights.
      operationId: "cloneGenerator"
      tags: [ "Generators" ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GeneratorCloneConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Generator"
        "400":
          $ref: "#/components/responses/BadRequest"
  /generators/{id}/export-to-file:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
    get:
      summary: "Export generator as a file"
      description: |
        Export the generator as a self-contained single file, that can then be imported as a fully functional
        generator on a MOSTLY AI server.
      operationId: "exportGeneratorToFile"
      tags: [ "Generators" ]
      responses:
        "200":
          description: "OK"
          content:
            application/zip:
              schema:
                type: "string"
                format: "binary"
  /generators/import-from-file:
    post:
      summary: "Import generator from a file"
      description: |
        Import a generator from a self-contained single file, that was previously exported from a MOSTLY AI server.
      operationId: "importGeneratorFromFile"
      tags: [ "Generators" ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/GeneratorImportFromFileConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Generator"
  /generators/{id}/tables:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
    post:
      summary: "Add table to generator"
      operationId: "addSourceTable"
      tags: [ "Source Tables" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceTableAddConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceTable"
  /generators/{id}/tables/upload:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
    post:
      summary: "Add table to generator by uploading a data file"
      operationId: "uploadSourceTable"
      tags: [ "Source Tables" ]
      requestBody:
        # Moved the requestBody definition inline since the OpenAPI Generator
        # generates a Kotlin object lacking the @RequestPart or @RequestParam annotations.
        # This absence may lead to 415 error in Spring due to mapping issues.
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                file:
                  type: "string"
                  format: "binary"
                name:
                  $ref: "#/components/schemas/SourceTableName"
                primaryKey:
                  $ref: "#/components/schemas/SourceTablePrimaryKey"
                modelConfiguration:
                  $ref: "#/components/schemas/ModelConfiguration"
                languageModelConfiguration:
                  $ref: "#/components/schemas/ModelConfiguration"
              required:
                - file
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceTable"
  /generators/{id}/tables/{tableId}:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
      - $ref: "#/components/parameters/sourceTableIdPath"
    get:
      summary: "Retrieve table from generator"
      operationId: "getSourceTable"
      tags: [ "Source Tables" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceTable"
    patch:
      summary: "Update table in generator"
      description: "Update a source table, and optionally provide model configurations."
      operationId: "patchSourceTable"
      tags: [ "Source Tables" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceTablePatchConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceTable"
    delete:
      summary: "Delete table from generator"
      operationId: "deleteSourceTable"
      tags: [ "Source Tables" ]
      responses:
        "200":
          description: "OK"
  /generators/{id}/tables/{tableId}/report:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
      - $ref: "#/components/parameters/sourceTableIdPath"
    get:
      summary: "Retrieve model report"
      operationId: "getModelReport"
      tags: [ "Source Tables" ]
      parameters:
        - $ref: "#/components/parameters/modelType"
        - $ref: "#/components/parameters/shortLivedFileToken"
      responses:
        "200":
          description: "OK"
          content:
            text/html:
              schema:
                type: "string"
  /generators/{id}/tables/{tableId}/samples:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
      - $ref: "#/components/parameters/sourceTableIdPath"
    get:
      summary: "Retrieve 10 random model samples as JSON array"
      operationId: "getModelSamples"
      tags: [ "Source Tables" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Samples"
  /generators/{id}/tables/{tableId}/columns/{columnId}:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
      - $ref: "#/components/parameters/sourceTableIdPath"
      - $ref: "#/components/parameters/sourceColumnIdPath"
    get:
      summary: "Retrieve column from table"
      operationId: "getSourceColumn"
      tags: [ "Source Columns" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceColumn"
    patch:
      summary: "Update column in table"
      operationId: "patchSourceColumn"
      tags: [ "Source Columns" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceColumnPatchConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceColumn"
  /generators/{id}/tables/{tableId}/foreign-keys:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
      - $ref: "#/components/parameters/sourceTableIdPath"
    post:
      summary: Create foreign key
      operationId: createSourceForeignKey
      tags: [ "Source Foreign Keys" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceForeignKeyConfig"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceForeignKey"

  /generators/{id}/tables/{tableId}/foreign-keys/{foreignKeyId}:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
      - $ref: "#/components/parameters/sourceTableIdPath"
      - $ref: "#/components/parameters/sourceForeignKeyIdPath"
    patch:
      summary: Update foreign key
      operationId: patchSourceForeignKey
      tags: [ "Source Foreign Keys" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SourceForeignKeyPatchConfig"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SourceForeignKey"
    delete:
      summary: Delete foreign key
      operationId: deleteSourceForeignKey
      tags: [ "Source Foreign Keys" ]
      responses:
        200:
          description: OK
  /generators/{id}/training:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
    get:
      summary: "Retrieve training progress"
      operationId: "getTrainingProgress"
      tags: [ "Generator Training" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobProgress"
  /generators/{id}/training/start:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
    post:
      summary: "Start training"
      operationId: "startTraining"
      tags: [ "Generator Training" ]
      responses:
        "200":
          description: "OK"
  /generators/{id}/training/steps/{stepId}/stop:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
      - $ref: "#/components/parameters/stepIdPath"
    post:
      summary: "Stop training"
      operationId: "stopTraining"
      tags: [ "Generator Training" ]
      responses:
        "200":
          description: "OK"
  /generators/{id}/training/cancel:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
    post:
      summary: "Cancel training"
      operationId: "cancelTraining"
      tags: [ "Generator Training" ]
      responses:
        "200":
          description: "OK"
  /generators/{id}/training/logs:
    parameters:
      - $ref: "#/components/parameters/generatorIdPath"
    get:
      summary: "Download training logs"
      operationId: "downloadTrainingLogs"
      tags: [ "Generator Training" ]
      parameters:
        - $ref: "#/components/parameters/shortLivedFileToken"
      responses:
        "200":
          description: "OK"
          content:
            application/zip:
              schema:
                type: "string"
                format: "binary"

  # SYNTHETIC DATASETS
  /synthetic-datasets:
    get:
      summary: "List synthetic datasets"
      operationId: "listSyntheticDatasets"
      tags: [ "Synthetic Datasets" ]
      parameters:
        - $ref: "#/components/parameters/pageOffset"
        - $ref: "#/components/parameters/pageLimit"
        - $ref: "#/components/parameters/filterByProgressStatus"
        - $ref: "#/components/parameters/filterBySearchTerm"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  totalCount:
                    $ref: "#/components/schemas/PaginatedTotalCount"
                  results:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/SyntheticDatasetListItem"
    post:
      summary: "Create synthetic dataset"
      operationId: "createSyntheticDataset"
      tags: [ "Synthetic Datasets" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SyntheticDatasetConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyntheticDataset"
  /synthetic-datasets/{id}:
    parameters:
      - $ref: "#/components/parameters/syntheticDatasetIdPath"
    get:
      summary: "Retrieve synthetic dataset"
      operationId: "getSyntheticDataset"
      tags: [ "Synthetic Datasets" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyntheticDataset"
    patch:
      summary: "Update synthetic dataset"
      operationId: "patchSyntheticDataset"
      tags: [ "Synthetic Datasets" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SyntheticDatasetPatchConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyntheticDataset"
    delete:
      summary: "Delete synthetic dataset"
      operationId: "deleteSyntheticDataset"
      tags: [ "Synthetic Datasets" ]
      responses:
        "200":
          description: "OK"
  /synthetic-datasets/{id}/like:
    parameters:
      - $ref: "#/components/parameters/syntheticDatasetIdPath"
    post:
      summary: "Like a synthetic dataset"
      description: "Like the provided synthetic dataset."
      operationId: "likeSyntheticDataset"
      tags: [ "Likes" ]
      responses:
        "200":
          description: "OK"
    delete:
      summary: "Unlike a synthetic dataset"
      description: "Unlike the provided synthetic dataset."
      operationId: "unLikeSyntheticDataset"
      tags: [ "Likes" ]
      responses:
        "200":
          description: "OK"
  /synthetic-datasets/{id}/share:
    parameters:
      - $ref: "#/components/parameters/syntheticDatasetIdPath"
    get:
      summary: "List shared users"
      description: "List all users that the synthetic dataset is shared with."
      operationId: "listSyntheticDatasetShares"
      tags: [ "Shares" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceShares"
    post:
      summary: "Share synthetic dataset"
      description: "Share the provided synthetic dataset with the provided user."
      operationId: "shareSyntheticDataset"
      tags: [ "Shares" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShareConfig"
      responses:
        "200":
          description: "OK"
    delete:
      summary: "Revoke synthetic dataset share"
      description: "Revoke a synthetic dataset share with the provided user."
      operationId: "deleteSyntheticDatasetShare"
      tags: [ "Shares" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShareDeleteConfig"
      responses:
        "200":
          description: "OK"
  /synthetic-datasets/{id}/share/public:
    parameters:
      - $ref: "#/components/parameters/syntheticDatasetIdPath"
    put:
      summary: "Share synthetic dataset publicly"
      description: "Share the provided synthetic dataset publicly."
      operationId: "createSyntheticDatasetPublicShare"
      tags: [ "Shares" ]
      responses:
        "200":
          description: "OK"
    delete:
      summary: "Revoke synthetic dataset public share"
      description: "Revoke a synthetic dataset public share."
      operationId: "deleteSyntheticDatasetPublicShare"
      tags: [ "Shares" ]
      responses:
        "200":
          description: "OK"
  /synthetic-datasets/{id}/config:
    parameters:
      - $ref: "#/components/parameters/syntheticDatasetIdPath"
    get:
      summary: "Retrieve configurable Synthetic Dataset properties as JSON"
      operationId: "getSyntheticDatasetConfig"
      tags: [ "Synthetic Datasets" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyntheticDatasetConfig"
  /synthetic-datasets/{id}/tables/{tableId}:
    parameters:
      - $ref: "#/components/parameters/syntheticDatasetIdPath"
      - $ref: "#/components/parameters/syntheticTableIdPath"
    get:
      summary: "Retrieve table from synthetic dataset"
      operationId: "getSyntheticTable"
      tags: [ "Synthetic Tables" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyntheticTable"
    patch:
      summary: "Update table in synthetic dataset"
      operationId: "patchSyntheticTable"
      tags: [ "Synthetic Tables" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SyntheticTablePatchConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SyntheticTable"
  /synthetic-datasets/{id}/tables/{tableId}/upload:
    parameters:
      - $ref: "#/components/parameters/syntheticDatasetIdPath"
      - $ref: "#/components/parameters/syntheticTableIdPath"
    post:
      summary: "Add sample seed data to synthetic dataset by uploading a data file"
      operationId: "uploadSampleSeed"
      tags: [ "Synthetic Tables" ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                file:
                  type: "string"
                  format: "binary"
              required:
                - file
      responses:
        "200":
          description: "OK"
  /synthetic-datasets/{id}/tables/{tableId}/report:
    parameters:
      - $ref: "#/components/parameters/syntheticDatasetIdPath"
      - $ref: "#/components/parameters/syntheticTableIdPath"
      - $ref: "#/components/parameters/reportType"
    get:
      summary: "Retrieve synthetic data report"
      operationId: "getDataReport"
      tags: [ "Synthetic Tables" ]
      parameters:
        - $ref: "#/components/parameters/shortLivedFileToken"
        - $ref: "#/components/parameters/modelType"
      responses:
        "200":
          description: "OK"
          content:
            text/html:
              schema:
                type: "string"
  /synthetic-datasets/{id}/tables/{tableId}/samples:
    parameters:
      - $ref: "#/components/parameters/syntheticDatasetIdPath"
      - $ref: "#/components/parameters/syntheticTableIdPath"
    get:
      summary: "Retrieve 10 random data samples as JSON"
      operationId: "getDataSamples"
      tags: [ "Synthetic Tables" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  additionalProperties: true
  /synthetic-datasets/{id}/generation:
    parameters:
      - $ref: "#/components/parameters/syntheticDatasetIdPath"
    get:
      summary: "Retrieve generation progress"
      operationId: "getGenerationProgress"
      tags: [ "Synthetic Generation" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JobProgress"
  /synthetic-datasets/{id}/generation/start:
    parameters:
      - $ref: "#/components/parameters/syntheticDatasetIdPath"
    post:
      summary: "Start generation"
      operationId: "startGeneration"
      tags: [ "Synthetic Generation" ]
      responses:
        "200":
          description: "OK"
  /synthetic-datasets/{id}/generation/cancel:
    parameters:
      - $ref: "#/components/parameters/syntheticDatasetIdPath"
    post:
      summary: "Cancel generation"
      operationId: "cancelGeneration"
      tags: [ "Synthetic Generation" ]
      responses:
        "200":
          description: "OK"
  /synthetic-datasets/{id}/generation/logs:
    parameters:
      - $ref: "#/components/parameters/syntheticDatasetIdPath"
    get:
      summary: "Download generation logs"
      operationId: "downloadGenerationLogs"
      tags: [ "Synthetic Generation" ]
      parameters:
        - $ref: "#/components/parameters/shortLivedFileToken"
      responses:
        "200":
          description: "OK"
          content:
            application/zip:
              schema:
                type: "string"
                format: "binary"
  /synthetic-datasets/{id}/download:
    parameters:
      - $ref: "#/components/parameters/syntheticDatasetIdPath"
    get:
      summary: "Download synthetic dataset"
      operationId: "downloadSyntheticDataset"
      tags: [ "Synthetic Datasets" ]
      parameters:
        - name: "format"
          in: "query"
          schema:
            $ref: "#/components/schemas/SyntheticDatasetFormat"
        - $ref: "#/components/parameters/shortLivedFileToken"
      responses:
        "200":
          description: "OK"
          content:
            application/zip:
              schema:
                type: "string"
                format: "binary"
  /synthetic-probes:
    post:
      summary: "Create synthetic probe"
      operationId: "createSyntheticProbe"
      tags: [ "Synthetic Probes" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SyntheticProbeConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                items:
                  $ref: "#/components/schemas/Probe"

  ## ASSISTANT
  /assistant/settings:
    get:
      summary: "Retrieve assistant settings. Only accessible for SuperAdmins."
      operationId: "getAssistantSettings"
      tags: [ "Assistant" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssistantSettings"
    put:
      summary: "Update assistant settings. Only accessible for SuperAdmins."
      operationId: "updateAssistantSettings"
      tags: [ "Assistant" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssistantSettings"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssistantSettings"

  /assistant/threads:
    get:
      summary: "List assistant threads"
      operationId: "listAssistantThreads"
      tags: [ "Assistant" ]
      parameters:
        - $ref: "#/components/parameters/pageOffset"
        - $ref: "#/components/parameters/pageLimit"
        - $ref: "#/components/parameters/filterBySearchTerm"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                properties:
                  totalCount:
                    $ref: "#/components/schemas/PaginatedTotalCount"
                  results:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/AssistantThreadListItem"
    post:
      summary: "Create assistant thread"
      operationId: "createAssistantThread"
      tags: [ "Assistant" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssistantThreadConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssistantThread"

  /assistant/threads/{id}:
    parameters:
      - $ref: "#/components/parameters/assistantThreadIdPath"
    get:
      summary: "Retrieve assistant thread"
      operationId: "getAssistantThread"
      tags: [ "Assistant" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssistantThread"
    patch:
      summary: "Update assistant thread"
      operationId: "patchAssistantThread"
      tags: [ "Assistant" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssistantThreadPatchConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssistantThread"
    delete:
      summary: "Delete assistant thread"
      operationId: "deleteAssistantThread"
      tags: [ "Assistant" ]
      responses:
        "200":
          description: "OK"
  /assistant/threads/{id}/status:
    parameters:
      - $ref: "#/components/parameters/assistantThreadIdPath"
    get:
      summary: "Get the session status of a thread"
      operationId: "getStatus"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  status:
                    $ref: "#/components/schemas/AssistantThreadSessionStatus"
  /assistant/threads/{id}/export:
    parameters:
      - $ref: "#/components/parameters/assistantThreadIdPath"
    get:
      summary: "Export the assistant thread"
      operationId: "exportThread"
      parameters:
        - $ref: "#/components/parameters/shortLivedFileToken"
      responses:
        "200":
          description: "OK"
          content:
            application/zip:
              schema:
                type: "string"
                format: "binary"
  /assistant/threads/{id}/messages:
    parameters:
      - $ref: "#/components/parameters/assistantThreadIdPath"
    post:
      summary: "Create a message"
      operationId: "createAssistantMessage"
      x-codegen-ignore: true
      tags: [ "Assistant" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssistantMessageConfig"
      responses:
        "200":
          description: |
            The newly created messages (excluding the user message)
            
            if stream=True then return stream of sever-sent events of type AssistantMessageDelta:
            
              data: {id: 'xyz1', role: 'assistant', 'contentType': 'text', delta: 'ok,', finishReason: None}
              data: {id: 'xyz1', role: 'assistant', 'contentType': 'text', delta: 'I', finishReason: None}
              data: {id: 'xyz1', role: 'assistant', 'contentType': 'text', delta: 'will,', finishReason: None}
              data: {id: 'xyz1', role: 'assistant', 'contentType': 'text', delta: 'write', finishReason: None}
              data: {id: 'xyz1', role: 'assistant', 'contentType': 'text', delta: 'some', finishReason: None}
              data: {id: 'xyz1', role: 'assistant', 'contentType': 'text', delta: 'python.', finishReason: None}

              data: {id: 'abc2', role: 'assistant', 'contentType': 'python', delta: 'r =', finishReason: None}
              data: {id: 'abc2', role: 'assistant', 'contentType': 'python', delta: 'r =', finishReason: None}
              data: {id: 'abc2', role: 'assistant', 'contentType': 'python', delta: 'r', finishReason: None}
              data: {id: 'abc2', role: 'assistant', 'contentType': 'python', delta: None, finishReason: 'tool_calls'}

              data: {id: 'def3', role: 'tool', 'contentType': 'text', delta: '3', finishReason: 'stop'}
            
              data: {id: 'ghi4', role: 'assistant', 'contentType': 'text', delta: 'The', finishReason: None}
              data: {id: 'ghi4', role: 'assistant', 'contentType': 'text', delta: 'answer', finishReason: None}
              data: {id: 'ghi4', role: 'assistant', 'contentType': 'text', delta: 'is', finishReason: None}
              data: {id: 'ghi4', role: 'assistant', 'contentType': 'text', delta: '3!', finishReason: 'stop'}

              data: [DONE]

          #            if stream=False then return array of AssistantMessages:
          #
          #              [
          #                {id: 'xyz1', role: 'assistant', 'contentType': 'text', content: 'ok, I will write some python.', finishReason: 'stop'},
          #                {id: 'abc2', role: 'assistant', 'contentType': 'python', content: 'r = sqrt(9)\nr', finishReason: 'tool_calls'},
          #                {id: 'def3', role: 'tool', 'contentType': 'text', content: '3', finishReason: 'stop'},
          #                {id: 'ghi4', role: 'assistant', 'contentType': 'text', content: 'The answer is 3!', finishReason: 'stop'},
          #              ]

          content:
            #            application/json:
            #              schema:
            #                type: "array"
            #                items:
            #                  - $ref: "#/components/schemas/AssistantMessage"
            text/event-stream:
              schema:
                $ref: "#/components/schemas/AssistantMessageDelta"
  /assistant/threads/{id}/file:
    parameters:
      - $ref: "#/components/parameters/assistantThreadIdPath"
    get:
      summary: "Fetch file in assistant thread"
      operationId: "fetchAssistantThreadFile"
      tags: [ "Assistant" ]
      parameters:
        - name: "filepath"
          in: "query"
          schema:
            type: "string"
          required: true
        - $ref: "#/components/parameters/shortLivedFileToken"
      responses:
        "200":
          description: "OK"
          content:
            application/octet-stream:
              schema:
                type: "string"
                format: "binary"
    put:
      summary: "Upload file to assistant thread"
      operationId: "uploadAssistantThreadFile"
      tags: [ "Assistant" ]
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: "object"
              properties:
                file:
                  type: "string"
                  format: "binary"
              required:
                - "file"
      responses:
        "200":
          description: "OK"
  /assistant/threads/{id}/interrupt:
    parameters:
      - $ref: "#/components/parameters/assistantThreadIdPath"
    post:
      summary: "Interrupt assistant thread streaming"
      operationId: "interruptAssistantThread"
      tags: [ "Assistant" ]
      responses:
        "200":
          description: "OK"
  /assistant/threads/{id}/share:
    parameters:
      - $ref: "#/components/parameters/assistantThreadIdPath"
    get:
      summary: "List shared users"
      description: "List all users that the assistant thread is shared with."
      operationId: "listAssistantThreadShares"
      tags: [ "Shares" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ResourceShares"
    post:
      summary: "Share assistant thread"
      description: "Share the provided assistant thread with the provided user."
      operationId: "shareAssistantThread"
      tags: [ "Shares" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShareConfig"
      responses:
        "200":
          description: "OK"
    delete:
      summary: "Revoke assistant thread share"
      description: "Revoke an assistant thread share with the provided user."
      operationId: "deleteAssistantThreadShare"
      tags: [ "Shares" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShareDeleteConfig"
      responses:
        "200":
          description: "OK"
  /assistant/threads/{id}/share/public:
    parameters:
      - $ref: "#/components/parameters/assistantThreadIdPath"
    put:
      summary: "Share assistant thread publicly"
      description: "Share the provided assistant thread publicly."
      operationId: "createAssistantThreadPublicShare"
      tags: [ "Shares" ]
      responses:
        "200":
          description: "OK"
    delete:
      summary: "Revoke assistant thread public share"
      description: "Revoke an assistant thread public share."
      operationId: "deleteAssistantThreadPublicShare"
      tags: [ "Shares" ]
      responses:
        "200":
          description: "OK"

  # USERS
  /users/me/key:
    put:
      summary: "Generate API key for current user"
      operationId: "generateUserApiKey"
      tags: [ "Users" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  apiKey:
                    type: "string"
  /users/me:
    get:
      summary: "Retrieve current user info"
      operationId: "getCurrentUserInfo"
      tags: [ "Users" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrentUser"
    delete:
      summary: "Delete the current user"
      operationId: "deleteCurrentUser"
      tags: [ "Users" ]
      responses:
        "200":
          description: "OK"

  /users/me/settings:
    put:
      summary: "Update settings"
      operationId: "updateUserSettings"
      tags: [ "Users" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserSettingsUpdateConfig"
      responses:
        "204":
          description: "OK"

  /users/me/notifications:
    get:
      summary: "Retrieve notifications"
      description: "Retrieve notifications for the current user. All notifications are marked as read after retrieval."
      operationId: "getNotifications"
      tags: [ "Users" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Notification"

  ## COMPUTES
  /computes:
    get:
      summary: "List the available computes"
      description: "List the available computes, sorted by order index. The first returned compute is the default compute."
      tags: [ "Computes" ]
      operationId: "listComputes"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ComputeListItem"
    post:
      summary: "Create compute"
      operationId: "createCompute"
      description: |
        Create a compute. Only accessible for SuperAdmins.

        The structures of the config and secrets parameters depend on the compute type.

          ```yaml
          - type: KUBERNETES
            config:
              toleration: string
          - type: DATABRICKS
            config:
              instanceURL: string
              clusterID: string
            secrets:
              token: string
          ```
      tags: [ "Computes" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ComputeConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Compute"
  /computes/{id}:
    parameters:
      - $ref: "#/components/parameters/computeIdPath"
    get:
      summary: "Retrieve compute"
      operationId: "getCompute"
      description: "Only accessible for SuperAdmins."
      tags: [ "Computes" ]
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Compute"
    patch:
      summary: "Update compute"
      operationId: "patchCompute"
      description: |
        Update a compute. Only accessible for SuperAdmins.
        
        For the structure of the config and secrets, see the CREATE method.
      tags: [ "Computes" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ComputePatchConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Compute"
    delete:
      summary: "Delete compute"
      operationId: "deleteCompute"
      description: "Only accessible for SuperAdmins."
      tags: [ "Computes" ]
      responses:
        "200":
          description: "OK"

  ## SYSTEM
  /about:
    get:
      summary: "Retrieve general info about service"
      operationId: "getAboutApplication"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  version:
                    type: "string"
                    description: "The version number of the service."
                    example: "v209"
                  assistant:
                    type: "boolean"
                    description: "A flag indicating if the assistant is enabled."
  /usage-report/periods:
    get:
      summary: "Retrieve usage report by Periods"
      operationId: "getUsageReportByPeriods"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  usage:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/UsageReportPeriod"
  /usage-report/download:
    get:
      summary: "Download usage report as CSV"
      operationId: "downloadUsageReport"
      responses:
        "200":
          description: "OK"
          content:
            application/octet-stream:
              schema:
                type: "string"
                format: "binary"

  ## MODELS
  /models/{modelType}:
    parameters:
      - $ref: "#/components/parameters/modelTypePath"
    get:
      summary: "List the available models"
      tags: [ "Models" ]
      operationId: "listModels"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ModelId"
  /models/LANGUAGE/config:
    get:
      summary: "Get current HuggingFace access key and list the available LANGUAGE models. Only accessible for SuperAdmins."
      tags: [ "Models" ]
      operationId: "getModelConfig"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  models:
                    type: "array"
                    items:
                      type: "string"
                      description: "The model identifiers for the available models, without the LANGUAGE prefix."
                    example:
                      - "MOSTLY_AI/LSTM_not_pretrained"
                      - "mistralai/Mistral-7B-Instruct-v0.2"
                  huggingFaceToken:
                    type: "string"
                    description: "The access token for the HuggingFace model hub."
    put:
      summary: "Update the settings for available LANGUAGE models. Only accessible for SuperAdmins."
      tags: [ "Models" ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: "object"
              properties:
                models:
                  type: "array"
                  items:
                    type: "string"
                    description: "The model identifiers for the available models, without the LANGUAGE prefix."
                  example:
                    - "MOSTLY_AI/LSTM_not_pretrained"
                    - "mistralai/Mistral-7B-Instruct-v0.2"
                huggingFaceToken:
                  type: "string"
                  description: "The access token for the HuggingFace model hub."
      responses:
        "200":
          description: "OK"

  /mostly-websocket:
    get:
      summary: WebSocket Connection
      description: Establish a WebSocket connection.
      responses:
        101:
          description: Switching Protocols
      x-websocket:
        summary: WebSocket Connection
        description: |
          This endpoint establishes a WebSocket connection using stomp protocol.
          Authorization is done via the `Authorization` connection header with value of Bearer token.
          After establishing the connection, the client should subscribe to the `/user/<user_id>/` topic to receive notifications.
          Received messages are in JSON format and have the following structure:
          ```json
            {"types":["GENERATOR_CREATED"],"resourceId":"81473b9d-4dd0-4f49-9a5b-72185349ce3f"}
          ```
          The `types` field is an array of events and is one of GENERATOR_CREATED, GENERATOR_STATUS_CHANGED, SYNTHETIC_DATASET_CREATED, SYNTHETIC_DATASET_STATUS_CHANGED, GENERATOR_MODEL_SAMPLES_CREATED, NOTIFICATIONS_UNREAD_COUNT.
          For the NOTIFICATIONS_UNREAD_COUNT event, the count of unread notifications is included in the message.
        protocol: websocket

components:
  securitySchemes:
    BearerAuth:
      type: "http"
      scheme: "bearer"
    ApiKeyAuth:
      type: "apiKey"
      in: "header"
      name: "X-MOSTLY-API-KEY"

  responses:

    BadRequest:
      description: "Bad Request"
      content:
        application/json:
          schema:
            type: "object"
            properties:
              message:
                type: "string"
                description: "A human-readable error message"

  parameters:

    pageOffset:
      name: "offset"
      description: "Offset the entities in the response"
      in: "query"
      schema:
        type: "integer"
        default: 0
    pageLimit:
      name: "limit"
      description: "Limit the number of entities in the response"
      in: "query"
      schema:
        type: "integer"
        default: 50
        minimum: 1
        maximum: 1000
    resourceIdPath:
      name: "resourceId"
      description: "The unique identifier of a resource, i.e. of a connector, generator, synthetic dataset or a assistant thread."
      in: "path"
      required: true
      schema:
        type: "string"
    resourceTypePath:
      name: "resourceType"
      description: "The type of a resource, i.e. of a connector, generator, synthetic dataset or a assistant thread."
      in: "path"
      required: true
      schema:
        enum:
          - "connectors"
          - "generators"
          - "synthetic-datasets"
          - "assistant-threads"
    connectorIdPath:
      name: "id"
      description: "The unique identifier of a connector."
      in: "path"
      required: true
      schema:
        type: "string"
    modelTypePath:
      name: "modelType"
      description: "Model type"
      in: "path"
      required: true
      schema:
        $ref: "#/components/schemas/ModelType"
    filterByConnectorAccessType:
      name: "accessType"
      description: "Filter by access type"
      in: "query"
      style: "form"
      explode: false
      schema:
        type: "array"
        items:
          $ref: "#/components/schemas/ConnectorAccessType"
    filterByProgressStatus:
      name: "status"
      description: "Filter by status"
      in: "query"
      style: "form"
      explode: false
      schema:
        type: "array"
        items:
          $ref: "#/components/schemas/ProgressStatus"
    filterBySearchTerm:
      name: "searchTerm"
      description: "Filter by search term"
      in: "query"
      style: "form"
      explode: false
      schema:
        type: "string"
    reportType:
      name: "reportType"
      description: "Synthetic dataset report type"
      in: "query"
      style: "form"
      schema:
        $ref: "#/components/schemas/SyntheticDatasetReportType"
    modelType:
      name: "modelType"
      description: "Model type"
      in: "query"
      style: "form"
      schema:
        $ref: "#/components/schemas/ModelType"
      required: true
    shortLivedFileToken:
      name: "slft"
      description: "A valid short-lived file token (`slft`) for accessing resource artefacts. See `metadata.shortLivedFileToken`."
      in: "query"
      style: "form"
      schema:
        type: "string"
      required: true
    generatorIdPath:
      name: "id"
      description: "The unique identifier of a generator."
      in: "path"
      required: true
      schema:
        type: "string"
    stepIdPath:
      name: "stepId"
      description: "The unique identifier of a step."
      in: "path"
      required: true
      schema:
        type: "string"
    sourceTableIdPath:
      name: "tableId"
      description: "The unique identifier of a source table."
      in: "path"
      required: true
      schema:
        type: "string"
    sourceColumnIdPath:
      name: "columnId"
      description: "The unique identifier of a source column."
      in: "path"
      required: true
      schema:
        type: "string"
    sourceForeignKeyIdPath:
      name: "foreignKeyId"
      description: "The unique identifier of a source foreign key."
      in: "path"
      required: true
      schema:
        type: "string"
    syntheticDatasetIdPath:
      name: "id"
      description: "The unique identifier of a synthetic dataset."
      in: "path"
      required: true
      schema:
        type: "string"
    syntheticTableIdPath:
      name: "tableId"
      description: "The unique identifier of a synthetic table."
      in: "path"
      required: true
      schema:
        type: "string"
    assistantThreadIdPath:
      name: "id"
      description: "The unique identifier of a assistant thread."
      in: "path"
      required: true
      schema:
        type: "string"
    computeIdPath:
      name: "id"
      description: "The unique identifier of a compute."
      in: "path"
      required: true
      schema:
        type: "string"

  schemas:

    # Generic components
    BaseResource:
      type: "object"
      description: "A set of common properties across resources."
      properties:
        id:
          type: "string"
          format: "uuid"
          description: "The unique identifier of the entity."
        name:
          type: "string"
          description: "The name of the entity."
        uri:
          $ref: "#/components/schemas/BaseResourceUri"
        currentUserPermissionLevel:
          $ref: "#/components/schemas/PermissionLevel"
        currentUserLikeStatus:
          $ref: "#/components/schemas/UserLikeStatus"
    BaseResourceUri:
      type: "string"
      description: "The API service endpoint of the entity"
      example: "/generators/94c77249-42bf-443a-8e17-6e18a19d60b8"

    # SHARES
    Share:
      type: "object"
      allOf:
        - $ref: "#/components/schemas/User"
      properties:
        permissionLevel:
          $ref: "#/components/schemas/PermissionLevel"
    ResourceShares:
      type: "object"
      properties:
        isPublic:
          type: "boolean"
        shares:
          type: "array"
          items:
            $ref: "#/components/schemas/Share"
    ShareConfig:
      type: "object"
      properties:
        userEmail:
          $ref: "#/components/schemas/UserEmail"
        permissionLevel:
          $ref: "#/components/schemas/PermissionLevel"
      required:
        - "userEmail"
        - "permissionLevel"
    ShareDeleteConfig:
      type: "object"
      properties:
        userEmail:
          $ref: "#/components/schemas/UserEmail"
      required:
        - "userEmail"

    # USERS
    User:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        firstName:
          $ref: "#/components/schemas/UserFirstName"
        lastName:
          $ref: "#/components/schemas/UserLastName"
        email:
          $ref: "#/components/schemas/UserEmail"
    UserId:
      type: "string"
      format: "uuid"
      description: "The unique identifier of a user."
    UserFirstName:
      type: "string"
      description: "First name of a user"
      maxLength: 30
    UserLastName:
      type: "string"
      description: "Last name of a user"
      maxLength: 30
    UserEmail:
      type: "string"
      description: "The email of a user"
    UserUnreadNotifications:
      type: "integer"
      description: "Number of unread notifications for the user"
    PermissionLevel:
      type: "string"
      description: |
        The permission level of the user with respect to this resource

        - `VIEW`: The user can view and use the resource
        - `ADMIN`: The user can edit, delete and transfer ownership of the resource
      enum:
        - "VIEW"
        - "EDIT"
        - "ADMIN"
    UserLikeStatus:
        type: "boolean"
        description: A boolean indicating whether the user has liked the entity or not
    CurrentUser:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/UserId"
        firstName:
          $ref: "#/components/schemas/UserFirstName"
        lastName:
          $ref: "#/components/schemas/UserLastName"
        email:
          $ref: "#/components/schemas/UserEmail"
        settings:
          $ref: "#/components/schemas/UserSettings"
        usage:
          $ref: "#/components/schemas/UserUsage"
        unreadNotifications:
          $ref: "#/components/schemas/UserUnreadNotifications"
    UserSettings:
      type: "object"
      description: "Additional optional user settings"
      additionalProperties: { }
    UserSettingsUpdateConfig:
      type: "object"
      properties:
        profile:
          $ref: "#/components/schemas/UserSettingsProfileUpdateConfig"
        assistant:
          $ref: "#/components/schemas/UserSettingsAssistantUpdateConfig"
    UserSettingsProfileUpdateConfig:
      type: "object"
      properties:
        firstName:
          $ref: "#/components/schemas/UserFirstName"
        lastName:
          $ref: "#/components/schemas/UserLastName"
    UserSettingsAssistantUpdateConfig:
      type: "object"
      properties:
        aboutUserMessage:
          description: "The instruction what the Assistant should know about the user to provide better response"
          type: "string"
        aboutModelMessage:
          description: "The instruction how the Assistant should respond"
          type: "string"
    UserUsage:
      type: "object"
      properties:
        credits:
          type: "object"
          properties:
            current:
              description: "The credit balance for the current time period"
              type: "number"
              format: "double"
            limit:
              description: "The credit limit for the current time period. If empty, then there is no limit."
              type: "number"
              format: "double"
            periodStart:
              description: "The UTC date and time when the current time period started"
              type: "string"
              format: "date-time"
            periodEnd:
              description: "The UTC date and time when the current time period ends"
              type: "string"
              format: "date-time"
        parallelTrainingJobs:
          type: "object"
          properties:
            current:
              description: "The number of currently running training jobs"
              type: "integer"
            limit:
              description: "The maximum number of running training jobs at any time. If empty, then there is no limit."
              type: "integer"
        parallelGenerationJobs:
          type: "object"
          properties:
            current:
              description: "The number of currently running generation jobs"
              type: "integer"
            limit:
              description: "The maximum number of running generation jobs at any time. If empty, then there is no limit."
              type: "integer"
    Notification:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
          description: "The unique identifier of the notification."
        type:
          $ref: "#/components/schemas/NotificationType"
        message:
          type: "string"
          description: "The message of the notification"
        status:
          $ref: "#/components/schemas/NotificationStatus"
        createdAt:
          type: "string"
          format: "date-time"
          description: "The UTC date and time when the notification has been created"
        resourceUri:
          $ref: "#/components/schemas/BaseResourceUri"
      required:
        - "id"
        - "type"
        - "message"
        - "status"
        - "createdAt"
    NotificationStatus:
      type: "string"
      description: "The status of the notification"
      enum:
        - "UNREAD"
        - "READ"
    NotificationType:
      type: "string"
      description: "The type of the notification"
      enum:
        - "RESOURCE_READY"
        - "RESOURCE_SHARED"
        - "RESOURCE_LIKED"
        - "RESOURCE_FAILED"
    Metadata:
      type: "object"
      description: "The metadata of a resource."
      readOnly: true
      properties:
        createdAt:
          type: "string"
          description: |
            The UTC date and time when the resource has been created.
          format: "date-time"
          example: "2023‐09‐07T18:40:39Z"
        ownerId:
          type: "string"
          description: "The unique identifier of the owner of the entity."
        ownerName:
          type: "string"
          description: "The name of the owner of the entity."
        currentUserPermissionLevel:
          $ref: "#/components/schemas/PermissionLevel"
        currentUserLikeStatus:
          $ref: "#/components/schemas/UserLikeStatus"
        shortLivedFileToken:
          type: "string"
          description: |
            An auto-generated short-lived file token (`slft`) for accessing resource artefacts.
            The token is always restricted to a single resource, only valid for 60 minutes, and 
            only accepted by API endpoints that allow to download single files.
    PaginatedTotalCount:
      type: "integer"
      description: "The total number of entities within the list"
    ModelEncodingType:
      type: "string"
      description: |
        The encoding type used for model training and data generation.
        
        - `AUTO`: Model chooses among available encoding types based on the column's data type.
        - `TABULAR_CATEGORICAL`: Model samples from existing (non-rare) categories.
        - `TABULAR_NUMERIC_AUTO`: Model chooses among 3 numeric encoding types based on the values.
        - `TABULAR_NUMERIC_DISCRETE`: Model samples from existing discrete numerical values.
        - `TABULAR_NUMERIC_BINNED`: Model samples from binned buckets, to then sample randomly within a bucket.
        - `TABULAR_NUMERIC_DIGIT`: Model samples each digit of a numerical value.
        - `TABULAR_CHARACTER`: Model samples each character of a string value.
        - `TABULAR_DATETIME`: Model samples each part of a datetime value.
        - `TABULAR_DATETIME_RELATIVE`: Model samples the relative difference between datetimes within a sequence.
        - `TABULAR_LAT_LONG`: Model samples a latitude-longitude column. The format is "latitude,longitude".
        - `LANGUAGE_TEXT`: Model will train a distinct LANGUAGE model for this column, to then generate free text.

        Encoding types, that are not being prefixed with either `TABULAR` or `LANGUAGE` have been deprecated.
      enum:
        - "AUTO"
        - "TABULAR_CATEGORICAL"
        - "TABULAR_NUMERIC_AUTO"
        - "TABULAR_NUMERIC_DISCRETE"
        - "TABULAR_NUMERIC_BINNED"
        - "TABULAR_NUMERIC_DIGIT"
        - "TABULAR_CHARACTER"
        - "TABULAR_DATETIME"
        - "TABULAR_DATETIME_RELATIVE"
        - "TABULAR_LAT_LONG"
        - "LANGUAGE_TEXT"
        - "CATEGORICAL"        # deprecated, use "TABULAR_CATEGORICAL"
        - "NUMERIC_AUTO"       # deprecated, use "TABULAR_NUMERIC_AUTO"
        - "NUMERIC_DISCRETE"   # deprecated, use "TABULAR_NUMERIC_DISCRETE"
        - "NUMERIC_BINNED"     # deprecated, use "TABULAR_NUMERIC_BINNED"
        - "NUMERIC_DIGIT"      # deprecated, use "TABULAR_NUMERIC_DIGIT"
        - "CHARACTER"          # deprecated, use "TABULAR_CHARACTER"
        - "DATETIME"           # deprecated, use "TABULAR_DATETIME"
        - "DATETIME_RELATIVE"  # deprecated, use "TABULAR_DATETIME_RELATIVE"
        - "LAT_LONG"           # deprecated, use "TABULAR_LAT_LONG"
      default: "AUTO"

    # CONNECTOR
    ConnectorId:
      type: "string"
      format: "uuid"
      description: "The unique identifier of a connector."
    ConnectorName:
      type: "string"
      description: "The name of a connector."
    ConnectorAccessType:
      type: "string"
      description: "The access type of a connector. Either `SOURCE` or `DESTINATION`."
      enum:
        - "SOURCE"
        - "DESTINATION"
      default: "SOURCE"
    ConnectorType:
      type: "string"
      description: |
        The type of a connector. 
        
        The type determines the structure of the config, secrets and ssl parameters.
        
        - `MYSQL`: MySQL database
        - `POSTGRES`: PostgreSQL database
        - `MSSQL`: Microsoft SQL Server database
        - `ORACLE`: Oracle database
        - `MARIADB`: MariaDB database
        - `SNOWFLAKE`: Snowflake cloud data platform
        - `BIGQUERY`: Google BigQuery cloud data warehouse
        - `HIVE`: Apache Hive database
        - `DATABRICKS`: Databricks cloud data platform
        - `AZURE_STORAGE`: Azure Blob Storage
        - `GOOGLE_CLOUD_STORAGE`: Google Cloud Storage
        - `S3_STORAGE`: Amazon S3 Storage
        - `FILE_UPLOAD`: File upload
      enum:
        - "MYSQL"
        - "POSTGRES"
        - "MSSQL"
        - "ORACLE"
        - "MARIADB"
        - "SNOWFLAKE"
        - "BIGQUERY"
        - "HIVE"
        - "DATABRICKS"
        - "AZURE_STORAGE"
        - "GOOGLE_CLOUD_STORAGE"
        - "S3_STORAGE"
        - "FILE_UPLOAD"
    ConnectorConfigParams:
      description: |
        The config parameters contain any configuration of the connector.
        The structure of the config object depends on the type of the connector.
      type: "object"
      additionalProperties: { }
    ConnectorSecretsParams:
      description: |
        The secrets parameters contain any sensitive credentials of the connector.
        The structure of the secrets object depends on the type of the connector.
      type: "object"
      additionalProperties:
        type: "string"
    ConnectorSslParams:
      description: |
        The ssl parameters contain any SSL related configurations of the connector.
        The structure of the ssl object depends on the type of the connector.
      type: "object"
      additionalProperties:
        type: "string"
    ConnectorTestConnection:
      type: "boolean"
      description: |
        If true, the connection will be tested before saving. In case of error, the connector will not be saved.
        If false, the connection will not be tested.
      default: true
    ConnectorUsage:
      type: "object"
      description: "Usage statistics of a connector."
      properties:
        noOfShares:
          type: "integer"
          description: "Number of shares of this connector."
        noOfGenerators:
          type: "integer"
          description: "Number of generators using this connector."
    ConnectorListItem:
      type: "object"
      description: "Essential connector details for listings."
      properties:
        id:
          $ref: "#/components/schemas/ConnectorId"
        name:
          $ref: "#/components/schemas/ConnectorName"
        type:
          $ref: "#/components/schemas/ConnectorType"
        accessType:
          $ref: "#/components/schemas/ConnectorAccessType"
        metadata:
          $ref: "#/components/schemas/Metadata"
        usage:
          $ref: "#/components/schemas/ConnectorUsage"
      required:
        - "id"
        - "name"
        - "type"
        - "accessType"
        - "metadata"
    Connector:
      type: "object"
      description: |
        A connector is a connection to a data source or a data destination.
      properties:
        id:
          $ref: "#/components/schemas/ConnectorId"
        name:
          $ref: "#/components/schemas/ConnectorName"
        type:
          $ref: "#/components/schemas/ConnectorType"
        accessType:
          $ref: "#/components/schemas/ConnectorAccessType"
        config:
          $ref: "#/components/schemas/ConnectorConfigParams"
        secrets:
          $ref: "#/components/schemas/ConnectorSecretsParams"
        ssl:
          $ref: "#/components/schemas/ConnectorSslParams"
        metadata:
          $ref: "#/components/schemas/Metadata"
        usage:
          $ref: "#/components/schemas/ConnectorUsage"
        tableId:
          type: "string"
          format: "uuid"
          description: |
            Optional. ID of a source table or a synthetic table, that this connector belongs to.
            If not set, then this connector is managed independently of any generator or synthetic dataset.
          default: null
      required:
        - "id"
        - "name"
        - "type"
        - "accessType"
    ConnectorConfig:
      type: "object"
      description: |
        The structures of the config, secrets and ssl parameters depend on the connector type.

        - Cloud storage:
          ```yaml
          - type: AZURE_STORAGE
            config:
              accountName: string
              clientId: string (required for auth via service principal)
              tenantId: string (required for auth via service principal)
            secrets:
              accountKey: string (required for regular auth)
              clientSecret: string (required for auth via service principal)

          - type: GOOGLE_CLOUD_STORAGE
            config:
            secrets:
              keyFile: string

          - type: S3_STORAGE
            config:
              accessKey: string
              endpointUrl: string (only needed for S3-compatible storage services other than AWS)
              sslEnabled: boolean, default: false
            secrets:
              secretKey: string
            ssl:
              caCertificate: base64-encoded string              
          ```
        - Database:
          ```yaml
          - type: BIGQUERY
            config:
            secrets:
              keyFile: string

          - type: DATABRICKS
            config:
              host: string
              httpPath: string
              catalog: string
              clientId: string (required for auth via service principal)
              tenantId: string (required for auth via service principal)
            secrets:
              accessToken: string (required for regular auth)
              clientSecret: string (required for auth via service principal)

          - type: HIVE
            config:
              host: string
              port: integer, default: 10000
              username: string (required for regular auth)
              kerberosEnabled: boolean, default: false
              kerberosServicePrincipal: string (required if kerberosEnabled)
              kerberosClientPrincipal: string (optional if kerberosEnabled)              
              kerberosKrb5Conf: string (required if kerberosEnabled)
              sslEnabled: boolean, default: false
            secrets:
              password: string (required for regular auth)
              kerberosKeytab: base64-encoded string (required if kerberosEnabled)
            ssl:
              caCertificate: base64-encoded string

          - type: MARIADB
            config:
              host: string
              port: integer, default: 3306
              username: string
            secrets:
              password: string

          - type: MSSQL
            config:
              host: string
              port: integer, default: 1433
              username: string
              database: string
            secrets:
             password: string

          - type: MYSQL
            config:
              host: string
              port: integer, default: 3306
              username: string
            secrets:
              password: string

          - type: ORACLE
            config:
              host: string
              port: integer, default: 1521
              username: string
              connectionType: enum {SID, SERVICE_NAME}, default: SID
              database: string, default: ORCL
            secrets:
              password: string

          - type: POSTGRES
            config:
              host: string
              port: integer, default: 5432
              username: string
              database: string
              sslEnabled: boolean, default: false
            secrets:
              password: string
            ssl:
              rootCertificate: base64-encoded string 
              sslCertificate: base64-encoded string
              sslCertificateKey: base64-encoded string

          - type: SNOWFLAKE
            config:
              account: string
              username: string
              warehouse: string, default: COMPUTE_WH
              database: string
            secrets:
              password: string
          ```
      properties:
        name:
          $ref: "#/components/schemas/ConnectorName"
        type:
          $ref: "#/components/schemas/ConnectorType"
        accessType:
          $ref: "#/components/schemas/ConnectorAccessType"
        config:
          $ref: "#/components/schemas/ConnectorConfigParams"
        secrets:
          $ref: "#/components/schemas/ConnectorSecretsParams"
        ssl:
          $ref: "#/components/schemas/ConnectorSslParams"
        testConnection:
          $ref: "#/components/schemas/ConnectorTestConnection"
      required:
        - "type"
    ConnectorPatchConfig:
      type: "object"
      description: |
        See ConnectorConfig for details on the structure of the connection parameters.
      properties:
        name:
          $ref: "#/components/schemas/ConnectorName"
        config:
          $ref: "#/components/schemas/ConnectorConfigParams"
        secrets:
          $ref: "#/components/schemas/ConnectorSecretsParams"
        ssl:
          $ref: "#/components/schemas/ConnectorSslParams"
        testConnection:
          $ref: "#/components/schemas/ConnectorTestConnection"

    # GENERATOR
    GeneratorId:
      type: "string"
      format: "uuid"
      description: "The unique identifier of a generator."
    GeneratorName:
      type: "string"
      description: "The name of a generator."
    GeneratorDescription:
      type: "string"
      description: "The description of a generator."
    GeneratorAccuracy:
      type: "number"
      format: "double"
      description: |
        The overall accuracy of the trained generator.
        This is the average of the overall accuracy scores of all trained models.
    GeneratorTrainingTime:
      type: "string"
      description: "The UTC date and time when the training has finished."
      format: "date-time"
    GeneratorUsage:
      type: "object"
      description: "Usage statistics of a generator."
      properties:
        totalDatapoints:
          type: "integer"
          format: "int64"
          description: "The total number of datapoints generated by this generator."
        totalComputeTime:
          type: "integer"
          description: |
            The total compute time in seconds used for training this generator.
            This is the sum of the compute time of all trained tasks.
        noOfSyntheticDatasets:
          type: "integer"
          description: "Number of synthetic datasets generated by this generator."
        noOfShares:
          type: "integer"
          description: "Number of shares of this generator."
        noOfLikes:
          type: "integer"
          description: "Number of likes of this generator."
    GeneratorListItem:
      type: "object"
      description: "Essential generator details for listings."
      properties:
        id:
          $ref: "#/components/schemas/GeneratorId"
        name:
          $ref: "#/components/schemas/GeneratorName"
        description:
          $ref: "#/components/schemas/GeneratorDescription"
        trainingStatus:
          $ref: "#/components/schemas/ProgressStatus"
        trainingTime:
          $ref: "#/components/schemas/GeneratorTrainingTime"
        usage:
          $ref: "#/components/schemas/GeneratorUsage"
        metadata:
          $ref: "#/components/schemas/Metadata"
      required:
        - "id"
        - "trainingStatus"
        - "metadata"
    Generator:
      type: "object"
      description: |
        A generator is a set models that can generate synthetic data.
        
        The generator can be trained on one or more source tables. A quality assurance report is generated for each model.
      properties:
        id:
          $ref: "#/components/schemas/GeneratorId"
        name:
          $ref: "#/components/schemas/GeneratorName"
        description:
          $ref: "#/components/schemas/GeneratorDescription"
        trainingStatus:
          $ref: "#/components/schemas/ProgressStatus"
        trainingTime:
          $ref: "#/components/schemas/GeneratorTrainingTime"
        usage:
          $ref: "#/components/schemas/GeneratorUsage"
        metadata:
          $ref: "#/components/schemas/Metadata"
        accuracy:
          $ref: "#/components/schemas/GeneratorAccuracy"
        tables:
          type: "array"
          description: "The tables of this generator"
          items:
            $ref: "#/components/schemas/SourceTable"
      required:
        - "id"
        - "trainingStatus"
        - "metadata"
    # Source Table
    SourceTableId:
      type: "string"
      format: "uuid"
      description: "The unique identifier of a source table."
    SourceTableName:
      type: "string"
      description: "The name of a source table. It must be unique within a generator."
    SourceTablePrimaryKey:
      type: "string"
      description: "The column name of the primary key."
    SourceTableLocation:
      type: "string"
      description: |
        The location of a source table. Together with the source connector it uniquely
        identifies a source, and samples data from there.
    SourceTableTotalRows:
      type: "integer"
      description: |
        The total number of rows in the source table while fetching data for training.
    SourceTableData:
      type: "string"
      description: |
        The base64-encoded string derived from a Parquet file containing the specified source table.
    SourceTableIncludeChildren:
      type: "boolean"
      description: |
        If true, all tables that are referenced by foreign keys will
        be included. If false, only the selected table will be included.
      default: false
    SourceTable:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/SourceTableId"
        sourceConnector:
          $ref: "#/components/schemas/BaseResource"
        location:
          $ref: "#/components/schemas/SourceTableLocation"
        name:
          $ref: "#/components/schemas/SourceTableName"
        primaryKey:
          $ref: "#/components/schemas/SourceTablePrimaryKey"
        columns:
          type: "array"
          description: "The columns of this generator table."
          items:
            $ref: "#/components/schemas/SourceColumn"
        foreignKeys:
          type: "array"
          description: "The foreign keys of a table."
          items:
            $ref: "#/components/schemas/SourceForeignKey"
        modelMetrics:
          $ref: "./metrics.yaml#/components/schemas/ModelMetrics"
        languageModelMetrics:
          $ref: "./metrics.yaml#/components/schemas/ModelMetrics"
        modelConfiguration:
          $ref: "#/components/schemas/ModelConfiguration"
        languageModelConfiguration:
          $ref: "#/components/schemas/ModelConfiguration"
        totalRows:
          $ref: "#/components/schemas/SourceTableTotalRows"
      required:
        - "id"
        - "name"
        - "columns"
        - "model"
    # Source Column
    SourceColumnId:
      type: "string"
      readOnly: true
      format: "uuid"
      description: "The unique identifier of a source column."
    SourceColumnName:
      type: "string"
      description: "The name of a source column."
    SourceColumnIncluded:
      type: "boolean"
      default: true
      description: |
        If true, the column will be included in the training.
        If false, the column will be excluded from the training.
    Probe:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The name of the table."
        rows:
          $ref: "#/components/schemas/Samples"
    Samples:
      type: array
      items:
        type: object
        additionalProperties: true
    SourceColumnValueRange:
      description: |
        The (privacy-safe) range of values detected within a source column. These values can then be used as seed values
        for conditional generation. For CATEGORICAL and NUMERIC_DISCRETE encoding types, this will be given as a list
        of unique values, sorted by popularity. For other NUMERIC and for DATETIME encoding types, this will be given
        as a min and max value. Note, that this property will only be populated, once the analysis step for the training
        of the generator has been completed.
      type: "object"
      properties:
        min:
          type: "string"
          description: "The minimum value of the column. For dates, this is represented in ISO format."
        max:
          type: "string"
          description: "The maximum value of the column. For dates, this is represented in ISO format."
        values:
          type: "array"
          description: "The list of distinct values of the column. Limited to a maximum of 1000 values."
          items:
            type: "string"
        has_null:
          type: "boolean"
          description: "If true, null value was detected within the column."
    SourceColumn:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/SourceColumnId"
        name:
          $ref: "#/components/schemas/SourceColumnName"
        included:
          $ref: "#/components/schemas/SourceColumnIncluded"
        modelEncodingType:
          $ref: "#/components/schemas/ModelEncodingType"
        valueRange:
          $ref: "#/components/schemas/SourceColumnValueRange"
      required:
        - "id"
        - "name"
        - "included"
        - "modelEncodingType"
    # Source ForeignKey
    SourceForeignKeyId:
      type: "string"
      readOnly: true
      format: "uuid"
      description: "The unique identifier of a foreign key."
    ForeignKeyColumn:
      type: "string"
      description: "The column name of a foreign key."
    ForeignKeyReferencedTable:
      type: "string"
      description: "The table name of the referenced table. That table must have a primary key already defined."
    ForeignKeyIsContext:
      type: "boolean"
      description: |
        If true, then the foreign key will be considered as a context relation.
        Note, that only one foreign key relation per table can be a context relation.
    SourceForeignKey:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/SourceForeignKeyId"
        column:
          $ref: "#/components/schemas/ForeignKeyColumn"
        referencedTable:
          $ref: "#/components/schemas/ForeignKeyReferencedTable"
        isContext:
          $ref: "#/components/schemas/ForeignKeyIsContext"
      required:
        - "id"
        - "foreignKey"
        - "referencedTable"
        - "isContext"
    # Generator Configs
    GeneratorConfig:
      type: "object"
      description: "The configuration for creating a new generator."
      properties:
        name:
          $ref: "#/components/schemas/GeneratorName"
        description:
          $ref: "#/components/schemas/GeneratorDescription"
        tables:
          type: "array"
          description: "The tables of a generator"
          items:
            $ref: "#/components/schemas/SourceTableConfig"
    GeneratorCloneConfig:
      type: "object"
      description: "The configuration for cloning a generator."
      properties:
        trainingStatus:
          $ref: "#/components/schemas/GeneratorCloneTrainingStatus"
    GeneratorCloneTrainingStatus:
      description: | 
        The training status of the new generator. The available options are:
          
        - `NEW`: The new generator will re-use existing data and model configurations.
        - `CONTINUE`: The new generator will re-use existing data and model configurations, as well as model weights.
      enum:
        - "NEW"
        - "CONTINUE"
      default: "NEW"
    GeneratorPatchConfig:
      type: "object"
      description: "The configuration for updating a generator."
      properties:
        name:
          $ref: "#/components/schemas/GeneratorName"
        description:
          $ref: "#/components/schemas/GeneratorDescription"
    GeneratorImportFromFileConfig:
      type: "object"
      properties:
        file:
          type: "string"
          format: "binary"
      required:
        - "file"
    SourceTableConfig:
      type: "object"
      properties:
        name:
          $ref: "#/components/schemas/SourceTableName"
        sourceConnectorId:
          $ref: "#/components/schemas/ConnectorId"
        location:
          $ref: "#/components/schemas/SourceTableLocation"
        data:
          $ref: "#/components/schemas/SourceTableData"
        modelConfiguration:
          $ref: "#/components/schemas/ModelConfiguration"
        languageModelConfiguration:
          $ref: "#/components/schemas/ModelConfiguration"
        primaryKey:
          $ref: "#/components/schemas/SourceTablePrimaryKey"
        foreignKeys:
          type: "array"
          description: "The foreign key configurations of this table."
          items:
            $ref: "#/components/schemas/SourceForeignKeyConfig"
        columns:
          type: "array"
          description: "The column configurations of this table."
          items:
            $ref: "#/components/schemas/SourceColumnConfig"
      required:
        - "name"
    SourceTablePatchConfig:
      type: "object"
      properties:
        name:
          $ref: "#/components/schemas/SourceTableName"
        primaryKey:
          $ref: "#/components/schemas/SourceTablePrimaryKey"
        modelConfiguration:
          $ref: "#/components/schemas/ModelConfiguration"
        languageModelConfiguration:
          $ref: "#/components/schemas/ModelConfiguration"
    SourceForeignKeyConfig:
      type: "object"
      properties:
        column:
          $ref: "#/components/schemas/ForeignKeyColumn"
        referencedTable:
          $ref: "#/components/schemas/ForeignKeyReferencedTable"
        isContext:
          $ref: "#/components/schemas/ForeignKeyIsContext"
      required:
        - "column"
        - "referencedTable"
    SourceForeignKeyPatchConfig:
      type: "object"
      properties:
        isContext:
          $ref: "#/components/schemas/ForeignKeyIsContext"
    SourceColumnConfig:
      type: "object"
      properties:
        name:
          $ref: "#/components/schemas/SourceColumnName"
        modelEncodingType:
          $ref: "#/components/schemas/ModelEncodingType"
      required:
        - "name"
    SourceColumnPatchConfig:
      type: "object"
      properties:
        included:
          $ref: "#/components/schemas/SourceColumnIncluded"
        modelEncodingType:
          $ref: "#/components/schemas/ModelEncodingType"
    SourceTableAddConfig:
      type: "object"
      properties:
        sourceConnectorId:
          $ref: "#/components/schemas/ConnectorId"
        location:
          $ref: "#/components/schemas/SourceTableLocation"
        name:
          $ref: "#/components/schemas/SourceTableName"
        includeChildren:
          $ref: "#/components/schemas/SourceTableIncludeChildren"
        modelConfiguration:
          $ref: "#/components/schemas/ModelConfiguration"
        languageModelConfiguration:
          $ref: "#/components/schemas/ModelConfiguration"
      required:
        - "sourceConnectorId"
        - "location"

    # MODEL
    ModelId:
      type: "string"
      description: "The model to be used for training."
      example:
        - MOSTLY_AI/Small
        - MOSTLY_AI/Medium
        - MOSTLY_AI/Large
        - MOSTLY_AI/LSTMFromScratch-3m
        - microsoft/phi-1_5
    ModelType:
      type: "string"
      description: |
        The type of model.

        - `TABULAR`: A generative AI model tailored towards tabular data, trained from scratch.
        - `LANGUAGE`: A generative AI model build upon a (pre-trained) language model.
      enum:
        - "TABULAR"
        - "LANGUAGE"
    ModelConfiguration:
      type: "object"
      description: "The training configuration for the model"
      properties:
        model:
          $ref: "#/components/schemas/ModelId"
        maxSampleSize:
          type: "integer"
          description: |
            The maximum number of samples to consider for training.
            If not provided, then all available samples will be taken.
          minimum: 1
          maximum: 1000000000
        batchSize:
          type: "integer"
          description: |
            The batch size used for training the model.
            If not provided, batchSize will be chosen automatically.
          minimum: 1
          maximum: 1000000
        maxTrainingTime:
          type: "number"
          format: "double"
          description: The maximum number of minutes to train the model.
          default: 10
          minimum: 0
          maximum: 100000
        maxEpochs:
          type: "number"
          format: "double"
          description: The maximum number of epochs to train the model.
          default: 100
          minimum: 0
          maximum: 100000
        maxSequenceWindow:
          type: "integer"
          description: |
            The maximum sequence window to consider for training.
            Only applicable for TABULAR models.
          default: 100
          minimum: 1
          maximum: 100000
        enableFlexibleGeneration:
          type: "boolean"
          description: |
            If true, then the trained generator can be used for rebalancing and imputation.
            Only applicable for TABULAR models.
          default: true
        valueProtection:
          description: |
            Defines if Rare Category, Extreme value, or Sequence length protection will be applied.
          type: "boolean"
          default: true
        rareCategoryReplacementMethod:
          description: |
            Specifies, if the rare categories for categoricals will be replaced by a constant
            _RARE_ or by a sample from non-rare categories.
            Only applicable if valueProtection is set to True.
          type: "string"
          enum:
            - "CONSTANT"
            - "SAMPLE"
          default: "CONSTANT"
        differentialPrivacy:
          $ref: "#/components/schemas/ModelConfigurationDifferentialPrivacy"
        compute:
          $ref: "#/components/schemas/ComputeId"
    ModelConfigurationDifferentialPrivacy:
      type: "object"
      description: |
        The optional differential privacy configuration for training the model. 
        If not provided, then no differential privacy will be applied.
      properties:
        maxEpsilon:
          type: "number"
          format: "double"
          description: |
            Specifies the maximum allowable epsilon value. If the training process exceeds this threshold, it will be terminated early. Only model checkpoints with epsilon values below this limit will be retained. 
            If not provided, the training will proceed without early termination based on epsilon constraints.
          minimum: 0.0
          maximum: 10000.0
        noiseMultiplier:
          type: "number"
          format: "double"
          description: |
            The ratio of the standard deviation of the Gaussian noise to the L2-sensitivity of the function to which the noise is added (How much noise to add).
          default: 1.5
          minimum: 0.0
          maximum: 10000.0
        maxGradNorm:
          type: "number"
          format: "double"
          description: |
            The maximum norm of the per-sample gradients for training the model with differential privacy.
          default: 1.0
          minimum: 0.0
          maximum: 10000.0

    # JOB_PROGRESS
    JobProgress:
      type: "object"
      properties:
        id:
          type: "string"
        startDate:
          type: "string"
          description: |
            The UTC date and time when the job has started.
            If the job has not started yet, then this is None.
          example: "2024-01-25T12:34:56Z"
          format: "date-time"
        endDate:
          type: "string"
          description: |
            The UTC date and time when the job has ended.
            If the job is still, then this is None.
          example: "2024-01-25T12:34:56Z"
          format: "date-time"
        progress:
          $ref: "#/components/schemas/ProgressValue"
        status:
          $ref: "#/components/schemas/ProgressStatus"
        steps:
          type: "array"
          items:
            $ref: "#/components/schemas/ProgressStep"
    ProgressStep:
      type: "object"
      properties:
        id:
          type: "string"
        modelLabel:
          type: "string"
          description: |
            The unique label for the model, consisting of table name and a suffix for the model type.
            This will be empty for steps that are not related to a model.
          example:
            - "census:tabular"
            - "census:language"
        computeName:
          $ref: "#/components/schemas/ComputeName"
        restarts:
          type: "integer"
          format: "int32"
          description: "The number of previous restarts for the corresponding task."
        stepCode:
          type: "string"
          enum:
            - "PULL_TRAINING_DATA"
            - "ANALYZE_TRAINING_DATA"
            - "ENCODE_TRAINING_DATA"
            - "TRAIN_MODEL"
            - "GENERATE_MODEL_REPORT_DATA"
            - "CREATE_MODEL_REPORT"
            - "FINALIZE_TRAINING"
            - "PULL_CONTEXT_DATA"
            - "GENERATE_DATA"
            - "CREATE_DATA_REPORT"
            - "FINALIZE_GENERATION"
            - "DELIVER_DATA"
        startDate:
          type: "string"
          description: |
            The UTC date and time when the job has started.
            If the job has not started yet, then this is None.
          example: "2024-01-25T12:34:56Z"
          format: "date-time"
        endDate:
          type: "string"
          description: |
            The UTC date and time when the job has ended.
            If the job is still, then this is None.
          example: "2024-01-25T12:34:56Z"
          format: "date-time"
        messages:
          type: "array"
          items:
            type: "object"
            additionalProperties: { }
        errorMessage:
          type: "string"
        progress:
          $ref: "#/components/schemas/ProgressValue"
        status:
          $ref: "#/components/schemas/ProgressStatus"
    ProgressValue:
      type: "object"
      properties:
        value:
          type: "integer"
        max:
          type: "integer"
    ProgressStatus:
      type: "string"
      description: |
        The status of a job or a step.
        NEW: The job/step is being configured, and has not started yet
        CONTINUE: The job/step is being configured, but has existing artefacts
        ON_HOLD: The job/step has been started, but is kept on hold
        QUEUED: The job/step has been started, and is awaiting for resources to execute
        IN_PROGRESS: The job/step is currently running
        DONE: The job/step has finished successfully
        FAILED: The job/step has failed
        CANCELED: The job/step has been canceled
      enum:
        - "NEW"
        - "CONTINUE"
        - "ON_HOLD"
        - "QUEUED"
        - "IN_PROGRESS"
        - "DONE"
        - "FAILED"
        - "CANCELED"

    # SYNTHETIC DATASET
    SyntheticDatasetId:
      type: "string"
      format: "uuid"
      description: "The unique identifier of a synthetic dataset."
    SyntheticDatasetName:
      type: "string"
      description: "The name of a synthetic dataset."
    SyntheticDatasetDescription:
      type: "string"
      description: "The description of a synthetic dataset."
    SyntheticDatasetGenerationTime:
      type: "string"
      description: "The UTC date and time when the generation has finished."
      format: "date-time"
    SyntheticDatasetUsage:
      type: "object"
      description: "Usage statistics of a synthetic dataset."
      properties:
        totalDatapoints:
          type: "integer"
          format: "int64"
          description: "The number of datapoints in the synthetic dataset"
        totalCredits:
          type: "number"
          format: "double"
          description: "The number of credits used for the synthetic dataset"
        totalComputeTime:
          type: "integer"
          description: |
            The total compute time in seconds used for generating this synthetic dataset.
            This is the sum of the compute time of all trained tasks.
        noOfShares:
          type: "integer"
          description: "Number of shares of this synthetic dataset."
        noOfLikes:
            type: "integer"
            description: "Number of likes of this synthetic dataset."
    SyntheticDatasetListItem:
      type: "object"
      description: "Essential synthetic dataset details for listings."
      properties:
        id:
          $ref: "#/components/schemas/SyntheticDatasetId"
        metadata:
          $ref: "#/components/schemas/Metadata"
        name:
          $ref: "#/components/schemas/SyntheticDatasetName"
        description:
          $ref: "#/components/schemas/SyntheticDatasetDescription"
        generationStatus:
          $ref: "#/components/schemas/ProgressStatus"
        generationTime:
          $ref: "#/components/schemas/SyntheticDatasetGenerationTime"
        usage:
          $ref: "#/components/schemas/SyntheticDatasetUsage"
      required:
        - "id"
        - "name"
        - "generationStatus"
        - "metadata"
    SyntheticDataset:
      type: "object"
      description: |
        A synthetic dataset is created based on a trained generator. 
        
        It consists of synthetic samples, as well as a quality assurance report.
      properties:
        id:
          $ref: "#/components/schemas/SyntheticDatasetId"
        generator:
          $ref: "#/components/schemas/BaseResource"
        metadata:
          $ref: "#/components/schemas/Metadata"
        name:
          $ref: "#/components/schemas/SyntheticDatasetName"
        description:
          $ref: "#/components/schemas/SyntheticDatasetDescription"
        generationStatus:
          $ref: "#/components/schemas/ProgressStatus"
        generationTime:
          $ref: "#/components/schemas/SyntheticDatasetGenerationTime"
        tables:
          type: "array"
          description: "The tables of this synthetic dataset."
          items:
            $ref: "#/components/schemas/SyntheticTable"
        delivery:
          $ref: "#/components/schemas/SyntheticDatasetDelivery"
        accuracy:
          $ref: "#/components/schemas/GeneratorAccuracy"
        usage:
          $ref: "#/components/schemas/SyntheticDatasetUsage"
      required:
        - "id"
        - "name"
        - "generationStatus"
        - "metadata"
    SyntheticDatasetFormat:
      type: "string"
      enum:
        - "CSV"
        - "PARQUET"
        - "XLSX"
      default: "CSV"
    SyntheticDatasetReportType:
      type: "string"
      enum:
        - "MODEL"
        - "DATA"
      default: "DATA"
    # Synthetic Table
    SyntheticTableSampleSize:
      type: "integer"
      description: |
        Number of generated samples. Only applicable for subject tables.
        If neither size nor seed is provided, then the default behavior for Synthetic Datasets is to generate the
        same size of samples as the original, and the default behavior for Synthetic Datasets is to generate one
        subject only.
      minimum: 1
    SyntheticTableSamplingTemperature:
      description: "temperature for sampling"
      type: "number"
      format: "double"
      minimum: 0.0
      maximum: 2.0
      default: 1.0
    SyntheticTableSamplingTopP:
      description: "topP for sampling"
      type: "number"
      format: "double"
      minimum: 0.9
      maximum: 1.0
      default: 1.0
    SyntheticTableSampleSeedConnectorId:
      description: |
        The connector id of the seed data for conditional generation.
        Only applicable for subject tables.
      type: "string"
      readOnly: true
      format: "uuid"
    SyntheticTableSampleSeedDict:
      type: "string"
      description: |
        The base64-encoded string derived from a json line file containing the specified sample seed data.
    SyntheticTableSampleSeedData:
      type: "string"
      description: |
        The base64-encoded string derived from a Parquet file containing the specified sample seed data.
    SyntheticTableRebalancing:
      type: "object"
      description: |
        Configure rebalancing of the table.
        Only applicable for categorical columns of a subject table.
      properties:
        column:
          type: "string"
          description: |
            The name of the column to be rebalanced.
            That column must be of modelEncodingType CATEGORICAL.
        probabilities:
          type: "object"
          description: |
            The target distribution of samples values.
            The keys are the categorical values, and the values are the probabilities.
          example:
            - US: 0.8
            - male: 0.5
              female: 0.5
          additionalProperties:
            type: "number"
            format: "double"
    SyntheticTableImputation:
      type: "array"
      description: |
        Specify a list of column names that are to be imputed.
        Imputed columns will suppress the sampling of NULL values.
      items:
        type: "string"
    SyntheticTableFairness:
      type: "object"
      description: |
        Configure a fairness objective for the table. Only applicable for a subject table.
        The generated synthetic data will maintain robust statistical parity between the target column and 
        the specified sensitive columns. All these columns must be categorical.
      properties:
        targetColumn:
          type: "string"
        sensitiveColumns:
          type: "array"
          items:
            type: "string"
      required:
        - targetColumn
        - sensitiveColumns
    SyntheticTableConfiguration:
      type: "object"
      description: "The sample configuration for a synthetic table"
      properties:
        sampleSize:
          $ref: "#/components/schemas/SyntheticTableSampleSize"
        sampleSeedConnectorId:
          $ref: "#/components/schemas/SyntheticTableSampleSeedConnectorId"
        sampleSeedDict:
          $ref: "#/components/schemas/SyntheticTableSampleSeedDict"
        sampleSeedData:
          $ref: "#/components/schemas/SyntheticTableSampleSeedData"
        samplingTemperature:
          $ref: "#/components/schemas/SyntheticTableSamplingTemperature"
        samplingTopP:
          $ref: "#/components/schemas/SyntheticTableSamplingTopP"
        rebalancing:
          $ref: "#/components/schemas/SyntheticTableRebalancing"
        imputation:
          $ref: "#/components/schemas/SyntheticTableImputation"
        fairness:
          $ref: "#/components/schemas/SyntheticTableFairness"
        tabularCompute:
          $ref: "#/components/schemas/ComputeId"
        languageCompute:
          $ref: "#/components/schemas/ComputeId"
    SyntheticTableId:
      type: "string"
      format: "uuid"
      description: "The unique identifier of a synthetic table."
    SyntheticTableName:
      type: "string"
      description: "The name of a synthetic table. This matches the name of a corresponding SourceTable."
    SyntheticTableTotalRows:
      type: "integer"
      description: |
        The total number of rows for that table in the generated synthetic dataset.
    SyntheticTableTotalDatapoints:
      type: "integer"
      description: |
        The total number of datapoints for that table in the generated synthetic dataset.
    SyntheticTable:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/SyntheticTableId"
        name:
          $ref: "#/components/schemas/SourceTableName"
        configuration:
          $ref: "#/components/schemas/SyntheticTableConfiguration"
        modelMetrics:
          $ref: "./metrics.yaml#/components/schemas/ModelMetrics"
        languageModelMetrics:
          $ref: "./metrics.yaml#/components/schemas/ModelMetrics"
        foreignKeys:
          type: "array"
          description: The foreign keys of this table.
          items:
            properties:
              column:
                $ref: "#/components/schemas/ForeignKeyColumn"
              referencedTable:
                $ref: "#/components/schemas/ForeignKeyReferencedTable"
              isContext:
                $ref: "#/components/schemas/ForeignKeyIsContext"
            required:
              - column
              - referencedTable
              - isContext
        totalRows:
          $ref: "#/components/schemas/SyntheticTableTotalRows"
        totalDatapoints:
          $ref: "#/components/schemas/SyntheticTableTotalDatapoints"
        sourceTableTotalRows:
          $ref: "#/components/schemas/SourceTableTotalRows"
      required:
        - name
    # Delivery
    SyntheticDatasetDelivery:
      type: "object"
      properties:
        overwriteTables:
          description: |
            If true, tables in the destination will be overwritten.
            If false, any tables exist, the delivery will fail.
          type: "boolean"
          default: false
        destinationConnectorId:
          $ref: "#/components/schemas/ConnectorId"
        location:
          type: "string"
          description: "The location for the destination connector."
      required:
        - "destinationConnectorId"
        - "location"
        - "overwriteTables"
    # Synthetic Dataset Configs
    SyntheticDatasetConfig:
      type: "object"
      properties:
        generatorId:
          $ref: "#/components/schemas/GeneratorId"
        name:
          $ref: "#/components/schemas/SyntheticDatasetName"
        description:
          $ref: "#/components/schemas/SyntheticDatasetDescription"
        tables:
          type: "array"
          items:
            $ref: "#/components/schemas/SyntheticTableConfig"
        delivery:
          $ref: "#/components/schemas/SyntheticDatasetDelivery"
    SyntheticDatasetPatchConfig:
      type: "object"
      properties:
        name:
          $ref: "#/components/schemas/SyntheticDatasetName"
        description:
          $ref: "#/components/schemas/SyntheticDatasetDescription"
        delivery:
          $ref: "#/components/schemas/SyntheticDatasetDelivery"
    SyntheticTablePatchConfig:
      type: "object"
      properties:
        configuration:
          $ref: "#/components/schemas/SyntheticTableConfiguration"
    SyntheticProbeConfig:
      type: "object"
      properties:
        generatorId:
          $ref: "#/components/schemas/GeneratorId"
        tables:
          type: "array"
          items:
            $ref: "#/components/schemas/SyntheticTableConfig"
    SyntheticTableConfig:
      type: "object"
      properties:
        name:
          $ref: "#/components/schemas/SyntheticTableName"
        configuration:
          $ref: "#/components/schemas/SyntheticTableConfiguration"
      required:
        - "name"

    # ASSISTANT
    AssistantSettingsIsEnabled:
      type: "boolean"
      description: "If true, the assistant is enabled."
    AssistantLiteLlmModel:
      type: "string"
      description: "The LiteLLM model of the assistant. See https://docs.litellm.ai/docs/providers."
      example:
        - "openai/gpt-3.5-turbo"
        - "mistral/mistral-tiny"
    AssistantLiteLlmApiKey:
      type: "string"
      description: "The API key for the selected LiteLLM model. See https://docs.litellm.ai/docs/providers."
    AssistantLiteLlmExtra:
      description: "Any additional configuration parameters for the selected LiteLLM model. See https://docs.litellm.ai/docs/providers."
      type: "array"
      items:
        type: "object"
        properties:
          key:
            type: "string"
          value:
            type: "string"
    AssistantDataLlmApiKey:
      type: "string"
      description: "The API key for the DataLLM service. See https://data.mostly.ai."
    AssistantSystemInstructions:
      description: "The system instructions of the assistant"
      type: "string"
    AssistantCustomInstructions:
      description: "The custom instructions of the assistant"
      type: "string"
    AssistantSettings:
      type: "object"
      description: "Additional optional assistant settings used for LiteLLM"
      properties:
        isEnabled:
          $ref: "#/components/schemas/AssistantSettingsIsEnabled"
        liteLlm:
          type: "object"
          properties:
            model:
              $ref: "#/components/schemas/AssistantLiteLlmModel"
            apiKey:
              $ref: "#/components/schemas/AssistantLiteLlmApiKey"
            extra:
              $ref: "#/components/schemas/AssistantLiteLlmExtra"
        dataLlm:
          type: "object"
          properties:
            apiKey:
              $ref: "#/components/schemas/AssistantDataLlmApiKey"
        systemInstructions:
          $ref: "#/components/schemas/AssistantSystemInstructions"
        customInstructions:
          $ref: "#/components/schemas/AssistantCustomInstructions"
        defaultSystemInstructions:
          $ref: "#/components/schemas/AssistantSystemInstructions"
    AssistantThreadId:
      type: "string"
      format: "uuid"
      description: "The unique identifier of a assistant thread."
    AssistantThreadName:
      type: "string"
      description: "The name of a assistant thread."
    AssistantThreadSessionStatus:
      type: "string"
      enum:
        - "initializing"
        - "running"
        - "expired"
    AssistantThreadListItem:
      type: "object"
      description: "Essential assistant thread details for listings."
      properties:
        id:
          $ref: "#/components/schemas/AssistantThreadId"
        metadata:
          $ref: "#/components/schemas/Metadata"
        name:
          $ref: "#/components/schemas/AssistantThreadName"
        usage:
          $ref: "#/components/schemas/AssistantThreadUsage"
      required:
        - "id"
        - "metadata"
    AssistantThread:
      type: "object"
      properties:
        id:
          $ref: "#/components/schemas/AssistantThreadId"
        metadata:
          $ref: "#/components/schemas/Metadata"
        name:
          $ref: "#/components/schemas/AssistantThreadName"
        sessionStatus:
          $ref: "#/components/schemas/AssistantThreadSessionStatus"
        messages:
          type: "array"
          description: |
            List of all existing messages, excluding any system message.
            Example:
              What's the square root of 9?   role: user        type: text
              ok, I will write some python   role: assistant   type: text
              r = math.sqrt(9)\nr            role: assistant   type: python
              3                              role: tool        type: console
              The answer is 3!               role: assistant   type: text
              Plot me a random barplot       role: user        type: text
              ... plt.savefig() ...          role: assistant   type: python
              Here is ![img]() ...           role: assistant   type: text
              Write me a random file         role: user        type: text
              ... .to_csv() ...              role: assistant   type: python
              Here is [file]() ...           role: assistant   type: text
          items:
            $ref: "#/components/schemas/AssistantMessage"
        usage:
          $ref: "#/components/schemas/AssistantThreadUsage"
    AssistantMessageId:
      type: "string"
      format: "uuid"
      description: "The unique identifier of a assistant message."
    AssistantMessageRole:
      type: "string"
      description: "The role of the author of this message"
      enum:
        - "system"
        - "user"
        - "assistant"
        - "tool"
        - "heartbeat"
    AssistantMessageContentType:
      type: "string"
      description: "The type of the message content"
      enum:
        - "text"
        - "python"
        - "console"
        - "file"
    AssistantMessageContent:
      type: "string"
      minLength: 0
      maxLength: 65000
      description: "The content of a message"
    AssistantMessageContentDelta:
      type: "string"
      minLength: 1
      maxLength: 65000
      description: "The partial content of a message"
    AssistantMessageFinishReason:
      type: "string"
      enum:
        - "stop"
        - "length"
        - "tool_calls"
    AssistantMessage:
      type: "object"
      description: "A complete message."
      properties:
        id:
          $ref: "#/components/schemas/AssistantMessageId"
        role:
          $ref: "#/components/schemas/AssistantMessageRole"
        contentType:
          $ref: "#/components/schemas/AssistantMessageContentType"
        content:
          $ref: "#/components/schemas/AssistantMessageContent"
        finishReason:
          $ref: "#/components/schemas/AssistantMessageFinishReason"
        tokensConsumed:
          type: "integer"
          format: "int64"
          description: "The number of tokens consumed by the assistant message."
    AssistantMessageDelta:
      type: "object"
      description: "A partial message delta generated by streamed model responses."
      properties:
        id:
          $ref: "#/components/schemas/AssistantMessageId"
        role:
          $ref: "#/components/schemas/AssistantMessageRole"
        contentType:
          $ref: "#/components/schemas/AssistantMessageContentType"
        delta:
          $ref: "#/components/schemas/AssistantMessageContentDelta"
        finishReason:
          $ref: "#/components/schemas/AssistantMessageFinishReason"
        tokensConsumed:
          type: "integer"
          format: "int64"
          description: "The number of tokens consumed by the model."
    AssistantThreadUsage:
      type: "object"
      properties:
        noOfShares:
          type: "integer"
          description: "Number of shares of this assistant thread."
        totalTokensConsumed:
          type: "integer"
          format: "int64"
          description: "The total number of tokens consumed by the thread."
    # Assistant Configs
    AssistantThreadConfig:
      type: "object"
      properties:
        name:
          $ref: "#/components/schemas/AssistantThreadName"
    AssistantThreadPatchConfig:
      type: "object"
      properties:
        name:
          $ref: "#/components/schemas/AssistantThreadName"
    AssistantMessageConfig:
      type: "object"
      description: "Submit a new message"
      properties:
        stream:
          type: "boolean"
          default: true
          nullable: true
          description: "Whether to stream back partial progress. If set, message deltas will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a data: [DONE] message."
        content:
          $ref: "#/components/schemas/AssistantMessageContent"
        contentType:
          $ref: "#/components/schemas/AssistantMessageContentType"

    # COMPUTES
    ComputeId:
      type: "string"
      format: "uuid"
    ComputeName:
      type: "string"
    ComputeType:
      type: "string"
      description: "The type of compute."
      enum:
        - "KUBERNETES"
        - "DATABRICKS"
    ComputeOrderIndex:
      type: "integer"
      description: "The index for determining the sort order when listing computes"
    ComputeResources:
      type: "object"
      description: "A set of available hardware resources for a compute resource."
      properties:
        cpus:
          type: "integer"
          description: "The number of CPU cores"
        memory:
          type: "number"
          format: "double"
          description: "The amount of memory in GB"
        gpus:
          type: "integer"
          description: "The number of GPUs"
          default: 0
        gpuMemory:
          type: "number"
          format: "double"
          description: "The amount of GPU memory in GB"
          default: 0
    ComputeConfigParams:
      type: "object"
      additionalProperties: { }
    ComputeSecretsParams:
      type: "object"
      additionalProperties: { }
    ComputeListItem:
      type: "object"
      description: "Essential compute details for listings."
      properties:
        id:
          $ref: "#/components/schemas/ComputeId"
        type:
          $ref: "#/components/schemas/ComputeType"
        name:
          $ref: "#/components/schemas/ComputeName"
        resources:
          $ref: "#/components/schemas/ComputeResources"
    Compute:
      type: "object"
      description: "A compute resource for executing tasks."
      properties:
        id:
          $ref: "#/components/schemas/ComputeId"
        name:
          $ref: "#/components/schemas/ComputeName"
        type:
          $ref: "#/components/schemas/ComputeType"
        config:
          $ref: "#/components/schemas/ComputeConfigParams"
        secrets:
          $ref: "#/components/schemas/ComputeSecretsParams"
        resources:
          $ref: "#/components/schemas/ComputeResources"
        orderIndex:
          $ref: "#/components/schemas/ComputeOrderIndex"
    # Compute Configs
    ComputeConfig:
      type: "object"
      description: "The configuration for creating a new compute resource."
      properties:
        name:
          $ref: "#/components/schemas/ComputeName"
        type:
          $ref: "#/components/schemas/ComputeType"
        resources:
          $ref: "#/components/schemas/ComputeResources"
        config:
          $ref: "#/components/schemas/ComputeConfigParams"
        secrets:
          $ref: "#/components/schemas/ComputeSecretsParams"
        orderIndex:
          $ref: "#/components/schemas/ComputeOrderIndex"
    ComputePatchConfig:
      type: "object"
      properties:
        name:
          $ref: "#/components/schemas/ComputeName"
        type:
          $ref: "#/components/schemas/ComputeType"
        resources:
          $ref: "#/components/schemas/ComputeResources"
        config:
          $ref: "#/components/schemas/ComputeConfigParams"
        secrets:
          $ref: "#/components/schemas/ComputeSecretsParams"
        orderIndex:
          $ref: "#/components/schemas/ComputeOrderIndex"

    # SYSTEM
    UsageReportPeriod:
      type: "object"
      description: "The usage report for a specific month"
      properties:
        periodStart:
          description: "The UTC date and time when the reported time period started"
          type: "string"
          format: "date-time"
        periodEnd:
          description: "The UTC date and time when the reported time period started"
          type: "string"
          format: "date-time"
        totalDatapoints:
          type: "integer"
          format: "int64"
          description: "The number of datapoints generated during the reported period"
        totalRows:
          type: "integer"
          format: "int64"
          description: "The number of rows generated during the reported period"
        totalCredits:
          type: "number"
          format: "double"
          description: "The number of credits used during the reported period"

security:
  - ApiKeyAuth: [ ]

servers:
  - url: https://app.mostly.ai/api/v2
